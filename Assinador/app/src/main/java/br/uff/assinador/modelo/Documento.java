package br.uff.assinador;

import br.uff.assinador.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DOCUMENTO".
 */
public class Documento {

    private Long id;
    /** Not-null value. */
    private String nome;
    /** Not-null value. */
    private String tipo;
    /** Not-null value. */
    private String descricao;
    /** Not-null value. */
    private byte[] arquivo;
    private byte[] assinatura;
    private String tipo_assinatura;
    private java.util.Date data;
    private long usuarioId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DocumentoDao myDao;

    private Usuario usuario;
    private Long usuario__resolvedKey;


    public Documento() {
    }

    public Documento(Long id) {
        this.id = id;
    }

    public Documento(Long id, String nome, String tipo, String descricao, byte[] arquivo, byte[] assinatura, String tipo_assinatura, java.util.Date data, long usuarioId) {
        this.id = id;
        this.nome = nome;
        this.tipo = tipo;
        this.descricao = descricao;
        this.arquivo = arquivo;
        this.assinatura = assinatura;
        this.tipo_assinatura = tipo_assinatura;
        this.data = data;
        this.usuarioId = usuarioId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDocumentoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNome() {
        return nome;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNome(String nome) {
        this.nome = nome;
    }

    /** Not-null value. */
    public String getTipo() {
        return tipo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    /** Not-null value. */
    public String getDescricao() {
        return descricao;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    /** Not-null value. */
    public byte[] getArquivo() {
        return arquivo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArquivo(byte[] arquivo) {
        this.arquivo = arquivo;
    }

    public byte[] getAssinatura() {
        return assinatura;
    }

    public void setAssinatura(byte[] assinatura) {
        this.assinatura = assinatura;
    }

    public String getTipo_assinatura() {
        return tipo_assinatura;
    }

    public void setTipo_assinatura(String tipo_assinatura) {
        this.tipo_assinatura = tipo_assinatura;
    }

    public java.util.Date getData() {
        return data;
    }

    public void setData(java.util.Date data) {
        this.data = data;
    }

    public long getUsuarioId() {
        return usuarioId;
    }

    public void setUsuarioId(long usuarioId) {
        this.usuarioId = usuarioId;
    }

    /** To-one relationship, resolved on first access. */
    public Usuario getUsuario() {
        long __key = this.usuarioId;
        if (usuario__resolvedKey == null || !usuario__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsuarioDao targetDao = daoSession.getUsuarioDao();
            Usuario usuarioNew = targetDao.load(__key);
            synchronized (this) {
                usuario = usuarioNew;
            	usuario__resolvedKey = __key;
            }
        }
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        if (usuario == null) {
            throw new DaoException("To-one property 'usuarioId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.usuario = usuario;
            usuarioId = usuario.getId();
            usuario__resolvedKey = usuarioId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
