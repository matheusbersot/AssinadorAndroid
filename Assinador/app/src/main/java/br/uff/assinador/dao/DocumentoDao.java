package br.uff.assinador.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import br.uff.assinador.modelo.Usuario;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import br.uff.assinador.modelo.Documento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCUMENTO".
*/
public class DocumentoDao extends AbstractDao<Documento, Long> {

    public static final String TABLENAME = "DOCUMENTO";

    /**
     * Properties of entity Documento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Tipo = new Property(2, String.class, "tipo", false, "TIPO");
        public final static Property Arquivo = new Property(3, byte[].class, "arquivo", false, "ARQUIVO");
        public final static Property Assinatura = new Property(4, byte[].class, "assinatura", false, "ASSINATURA");
        public final static Property Tipo_assinatura = new Property(5, byte[].class, "tipo_assinatura", false, "TIPO_ASSINATURA");
        public final static Property Data = new Property(6, java.util.Date.class, "data", false, "DATA");
        public final static Property UsuarioId = new Property(7, long.class, "usuarioId", false, "USUARIO_ID");
    };

    private DaoSession daoSession;

    private Query<Documento> usuario_DocumentosQuery;

    public DocumentoDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCUMENTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOME\" TEXT NOT NULL ," + // 1: nome
                "\"TIPO\" TEXT NOT NULL ," + // 2: tipo
                "\"ARQUIVO\" BLOB NOT NULL ," + // 3: arquivo
                "\"ASSINATURA\" BLOB," + // 4: assinatura
                "\"TIPO_ASSINATURA\" BLOB," + // 5: tipo_assinatura
                "\"DATA\" INTEGER," + // 6: data
                "\"USUARIO_ID\" INTEGER NOT NULL );"); // 7: usuarioId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCUMENTO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Documento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNome());
        stmt.bindString(3, entity.getTipo());
        stmt.bindBlob(4, entity.getArquivo());
 
        byte[] assinatura = entity.getAssinatura();
        if (assinatura != null) {
            stmt.bindBlob(5, assinatura);
        }
 
        byte[] tipo_assinatura = entity.getTipo_assinatura();
        if (tipo_assinatura != null) {
            stmt.bindBlob(6, tipo_assinatura);
        }
 
        java.util.Date data = entity.getData();
        if (data != null) {
            stmt.bindLong(7, data.getTime());
        }
        stmt.bindLong(8, entity.getUsuarioId());
    }

    @Override
    protected void attachEntity(Documento entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Documento readEntity(Cursor cursor, int offset) {
        Documento entity = new Documento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nome
            cursor.getString(offset + 2), // tipo
            cursor.getBlob(offset + 3), // arquivo
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // assinatura
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // tipo_assinatura
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // data
            cursor.getLong(offset + 7) // usuarioId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Documento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.getString(offset + 1));
        entity.setTipo(cursor.getString(offset + 2));
        entity.setArquivo(cursor.getBlob(offset + 3));
        entity.setAssinatura(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setTipo_assinatura(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUsuarioId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Documento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Documento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "documentos" to-many relationship of Usuario. */
    public List<Documento> _queryUsuario_Documentos(long usuarioId) {
        synchronized (this) {
            if (usuario_DocumentosQuery == null) {
                QueryBuilder<Documento> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UsuarioId.eq(null));
                queryBuilder.orderRaw("T.'DATA' ASC");
                usuario_DocumentosQuery = queryBuilder.build();
            }
        }
        Query<Documento> query = usuario_DocumentosQuery.forCurrentThread();
        query.setParameter(0, usuarioId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUsuarioDao().getAllColumns());
            builder.append(" FROM DOCUMENTO T");
            builder.append(" LEFT JOIN USUARIO T0 ON T.\"USUARIO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Documento loadCurrentDeep(Cursor cursor, boolean lock) {
        Documento entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Usuario usuario = loadCurrentOther(daoSession.getUsuarioDao(), cursor, offset);
         if(usuario != null) {
            entity.setUsuario(usuario);
        }

        return entity;    
    }

    public Documento loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Documento> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Documento> list = new ArrayList<Documento>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Documento> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Documento> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
